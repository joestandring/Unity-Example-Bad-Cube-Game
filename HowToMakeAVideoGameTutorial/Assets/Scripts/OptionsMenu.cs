using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Audio;
using UnityEngine.UI;

public class OptionsMenu : MonoBehaviour
{
    // Our audio mixer is referenced
    public AudioMixer audioMixer;
    public Dropdown resolutionDropdown;

    Resolution[] resolutions;

    void Start()
    {
        // An array called resolutions is created with all possible screen resolutions generated by Unity
        resolutions = Screen.resolutions;
        // All the placeholder options are cleared from the dropdown
        resolutionDropdown.ClearOptions();
        // The array is converted to a list of strings called options
        List<string> options = new List<string>();

        int currentResolutionIndex = 0;
        // For the number of items in resolutions, an option will be added to the list of strings
        for (int i = 0; i < resolutions.Length; i++)
        {
            string option = resolutions[i].width + " x " + resolutions[i].height;
            options.Add(option);

            // Compare the current users screen resolution to the current indexed resolution in the for loop. If it matches, the resolution index will be set for the variable currentResolutionIndex
            if (resolutions[i].width == Screen.currentResolution.width &&
                resolutions[i].height == Screen.currentResolution.height)
            {
                currentResolutionIndex = i;
            }
        }
        // The lsit of strings is added to the dropdown menu in Unity
        resolutionDropdown.AddOptions(options);
        // the dropdown will change its value to the currentResolutionIndex and refresh to update the result
        resolutionDropdown.value = currentResolutionIndex;
        resolutionDropdown.RefreshShownValue();
    }

    public void setResolution(int resolutionIndex)
    {
        // Sets the games resolution to the resolution index of the previously generated list
        Resolution resolution = resolutions[resolutionIndex];
        Screen.SetResolution(resolution.width, resolution.height, Screen.fullScreen);
    }

    public void SetVolume(float volume)
    {
        // the paramater for the audio mixer createed in Unity will be equal to the value of SetVolume parameter
        audioMixer.SetFloat("Volume", volume);
    }

    public void SetGraphics(int qualityIndex)
    {
        // The quality setting assigned to the index given in the paramter is applied to the game when selected inthe dropdown
        QualitySettings.SetQualityLevel(qualityIndex);
    }

    public void SetFullscreen(bool isFullscreen)
    {
        // When the button is toggled, fullscreen will be applied/unapplied
        Screen.fullScreen = isFullscreen;
    }
}
